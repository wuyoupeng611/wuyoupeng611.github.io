<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>基于springboot的小blog项目</title>
    <url>/post/ed9909aa/</url>
    <content><![CDATA[<span id="more"></span>]]></content>
      <categories>
        <category>item</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>item</tag>
      </tags>
  </entry>
  <entry>
    <title>docker学习</title>
    <url>/post/a3ab2041/</url>
    <content><![CDATA[<span id="more"></span>

<h3 id="一-Docker介绍"><a href="#一-Docker介绍" class="headerlink" title="一.Docker介绍"></a>一.Docker介绍</h3><ul>
<li><p>Docker 是一个开源的应用容器引擎，基于Go语言并遵从 Apache2.0 协议开源。</p>
</li>
<li><p>Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。</p>
</li>
<li><p>容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。</p>
</li>
</ul>
<h3 id="二-Docker的应用场景"><a href="#二-Docker的应用场景" class="headerlink" title="二.Docker的应用场景"></a>二.Docker的应用场景</h3><ul>
<li><p>Web 应用的自动化打包和发布。</p>
</li>
<li><p>自动化测试和持续集成、发布。</p>
</li>
<li><p>在服务型环境中部署和调整数据库或其他的后台应用。</p>
</li>
<li><p>从头编译或者扩展现有的 OpenShift 或 Cloud Foundry 平台来搭建自己的 PaaS 环境。</p>
</li>
</ul>
<h3 id="三-Docker的优点"><a href="#三-Docker的优点" class="headerlink" title="三.Docker的优点"></a>三.Docker的优点</h3><ul>
<li><p>Docker 是一个用于开发，交付和运行应用程序的开放平台。</p>
</li>
<li><p>Docker 使您能够将应用程序与基础架构分开，从而可以快速交付软件。</p>
</li>
<li><p>借助 Docker，您可以与管理应用程序相同的方式来管理基础架构。</p>
</li>
<li><p>通过利用 Docker 的方法来快速交付，测试和部署代码，您可以大大减少编写代码和在生产环境中运行代码之间的延迟。</p>
</li>
</ul>
<h3 id="四-Docker的架构"><a href="#四-Docker的架构" class="headerlink" title="四.Docker的架构"></a>四.Docker的架构</h3><ul>
<li><strong>镜像（Image）</strong>：Docker 镜像（Image）就像是一个模版，可以通过这个模版来创建容器服务。</li>
<li><strong>容器（Container）</strong>：镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</li>
<li><strong>仓库（Repository）</strong>：仓库可看成一个代码控制中心，用来保存镜像。</li>
<li>Docker 使用客户端-服务器 (C/S) 架构模式，使用远程API来管理和创建Docker容器。</li>
</ul>
<h3 id="五-镜像命令"><a href="#五-镜像命令" class="headerlink" title="五.镜像命令"></a>五.镜像命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#帮助命令</span></span><br><span class="line">docker version			<span class="comment">#显示docker的版本信息</span></span><br><span class="line">docker info			<span class="comment">#显示docker的系统信息，包括容器和镜像的数量</span></span><br><span class="line">docker 命令 --<span class="built_in">help</span>		<span class="comment">#帮助命令</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#镜像命令</span></span><br><span class="line">docker images			<span class="comment">#查看所有的镜像</span></span><br><span class="line">docker images -aq		<span class="comment">#-a:列出所有镜像，-q:只显示镜像的id</span></span><br><span class="line">docker search mysql --filter=STARS=3000	<span class="comment">#搜索镜像，且STARS大于3000</span></span><br><span class="line">docker pull mysql:tag		<span class="comment">#下载镜像，如果不写tag，默认就是latest</span></span><br><span class="line">docker rmi -f 镜像id		<span class="comment">#删除指定的镜像</span></span><br><span class="line">docker rmi -f $(docker images -aq)	<span class="comment">#删除全部镜像</span></span><br></pre></td></tr></table></figure>



<h3 id="六-容器命令"><a href="#六-容器命令" class="headerlink" title="六.容器命令"></a>六.容器命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run [可选参数] image		<span class="comment">#新建容器并启动</span></span><br><span class="line"><span class="comment">#可选参数说明</span></span><br><span class="line">--name=<span class="string">&quot;Name&quot;</span>		<span class="comment">#容器的名字，用来区分同一个镜像创建的容器</span></span><br><span class="line">-d			<span class="comment">#后台方式运行</span></span><br><span class="line">-it			<span class="comment">#使用交互方式运行，进入容器查看内容</span></span><br><span class="line">-p 8080:8080		<span class="comment">#指定容器端口，主机端口:容器端口</span></span><br><span class="line"></span><br><span class="line">docker run -it 镜像名 /bin/bash		<span class="comment">#启动并进入容器</span></span><br><span class="line">docker run -d 镜像名			<span class="comment">#后台启动容器</span></span><br><span class="line"><span class="built_in">exit</span>			<span class="comment">#容器停止并退回主机</span></span><br><span class="line">ctrl+p+q		<span class="comment">#容器不停止退出</span></span><br><span class="line">docker <span class="built_in">exec</span> -it 容器id /bin/bash	<span class="comment">#进入正在运行的容器，会开启新的终端</span></span><br><span class="line">docker attach 容器id		<span class="comment">#进入容器正在执行的终端，不会启动新的进程</span></span><br><span class="line">docker ps			<span class="comment">#列出当前正在运行的容器</span></span><br><span class="line">docker ps -aq		<span class="comment">#a:列出当前正在运行的容器和历史运行过得，q:只显示容器编号</span></span><br><span class="line">docker rm 容器id		<span class="comment">#删除指定容器，不能删除正在运行的，</span></span><br><span class="line">docker rm -f $(docker ps -aq)	<span class="comment">#强制删除所有容器</span></span><br><span class="line">docker start 容器id		<span class="comment">#启动容器</span></span><br><span class="line">docker restart 容器id		<span class="comment">#重启容器</span></span><br><span class="line">docker stop 容器id		<span class="comment">#停止当前正在运行的容器</span></span><br><span class="line">docker <span class="built_in">kill</span> 容器id		<span class="comment">#强制停止当前容器</span></span><br></pre></td></tr></table></figure>



<h3 id="七-其它常用命令"><a href="#七-其它常用命令" class="headerlink" title="七.其它常用命令"></a>七.其它常用命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker logs -tf --tail 10 容器id	<span class="comment">#-tf:显示日志，-tail:显示日志条数</span></span><br><span class="line">docker top 容器id		<span class="comment">#查看容器进程信息</span></span><br><span class="line">docker inspect 容器id		<span class="comment">#查看容器元数据</span></span><br><span class="line">docker cp 容器id:容器内路径 目的的主机路径	<span class="comment">#从容器内拷贝文件到主机</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>git</title>
    <url>/post/518e617c/</url>
    <content><![CDATA[<span id="more"></span>

<h3 id="一-Git介绍"><a href="#一-Git介绍" class="headerlink" title="一.Git介绍"></a>一.Git介绍</h3><ul>
<li>Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</li>
<li>Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</li>
<li>Git 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式。</li>
</ul>
<h3 id="二-Git工作区、暂存区和版本库"><a href="#二-Git工作区、暂存区和版本库" class="headerlink" title="二.Git工作区、暂存区和版本库"></a>二.Git工作区、暂存区和版本库</h3><ul>
<li><strong>工作区：</strong>就是你在电脑里能看到的目录。</li>
<li><strong>暂存区：</strong>英文叫 stage 或 index。一般存放在 <strong>.git</strong> 目录下的 index 文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。</li>
<li><strong>版本库：</strong>工作区有一个隐藏目录 <strong>.git</strong>，这个不算工作区，而是 Git 的版本库。</li>
<li>[工作区、版本库中的暂存区和版本库之间的关系](<a href="https://www.runoob.com/git/git-workspace-index-repo.html">Git 工作区、暂存区和版本库 | 菜鸟教程 (runoob.com)</a>)</li>
</ul>
<h3 id="三-Git的工作流程"><a href="#三-Git的工作流程" class="headerlink" title="三.Git的工作流程"></a>三.Git的工作流程</h3><ol>
<li><p>从远程仓库中克隆代码到本地仓库。</p>
</li>
<li><p>从本地仓库中checkout代码，然后进行代码修改。</p>
</li>
<li><p>在提交前先将代码提交到暂存区。</p>
</li>
<li><p>提交到本地仓库，本地仓库中保存需改的各个历史版本。</p>
<p><img data-src="D:\blog\source_posts\git的使用\Snipaste_2021-05-04_21-39-27.png" alt="工作流程"></p>
</li>
</ol>
<h3 id="四-Git的使用"><a href="#四-Git的使用" class="headerlink" title="四.Git的使用"></a>四.Git的使用</h3><h4 id="1-Git的环境配置"><a href="#1-Git的环境配置" class="headerlink" title="1.Git的环境配置"></a>1.Git的环境配置</h4><ul>
<li><p>当安装Git后首先要做的事情是设置用户名称和email地址。</p>
</li>
<li><p>设置用户信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;用户名称&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;email&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><p>查看用户信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --list</span><br><span class="line">git config user.name</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="2-获取Git仓库"><a href="#2-获取Git仓库" class="headerlink" title="2.获取Git仓库"></a>2.获取Git仓库</h4><p>​    获取Git仓库通常有两种方式：</p>
<ul>
<li>在本地初始化一个Git仓库<ol>
<li>在电脑的任意位置创建一个空目录作为我们的本地Git仓库。</li>
<li>进入这个目录，点击右键打开<strong>Git bash</strong>窗口。</li>
<li>执行命令<strong>git init</strong>，如果在当前目录中看到**.git** 文件夹（此文件夹为隐藏文件夹）)则说明Git仓库创建成功。</li>
</ol>
</li>
<li>从远程仓库克隆<ol>
<li>可以通过Git提供的命令从远程仓库进行克隆，将远程仓库克隆到本地。</li>
<li>命令形式：<strong>git clone 远程Git仓库地址</strong></li>
</ol>
</li>
</ul>
<h4 id="3-本地仓库操作"><a href="#3-本地仓库操作" class="headerlink" title="3.本地仓库操作"></a>3.本地仓库操作</h4><ol>
<li><p>Git工作目录下的<strong>文件</strong>存在两种状态：</p>
<ul>
<li><strong>untracked</strong>未跟踪（未被纳入版本控制）</li>
<li><strong>tracked</strong>已跟踪（被纳入版本控制）<ul>
<li><strong>unmodified</strong>未修改状态</li>
<li><strong>modified</strong>已修改状态</li>
<li><strong>staged</strong>已暂存状态</li>
</ul>
</li>
</ul>
</li>
<li><p>Git的本地仓库基本命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git status				<span class="comment">#查看文件状态</span></span><br><span class="line">git add 文件名			<span class="comment">#将未跟踪的文件加入暂存区</span></span><br><span class="line">git reset 文件名			<span class="comment">#将暂存区的文件取消暂存</span></span><br><span class="line">git commit -m <span class="string">&quot;日志&quot;</span> 文件名		<span class="comment">#将暂存区的文件修改提交到本地仓库</span></span><br><span class="line">git rm 文件名			<span class="comment">#删除文件</span></span><br><span class="line">git <span class="built_in">log</span>				<span class="comment">#查看日志</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="4-远程仓库的操作"><a href="#4-远程仓库的操作" class="headerlink" title="4.远程仓库的操作"></a>4.远程仓库的操作</h4><ul>
<li>查看远程仓库</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote			<span class="comment">#git克隆的仓库服务器的默认名称为origin</span></span><br><span class="line">git remote -v</span><br><span class="line">git remote show origin</span><br></pre></td></tr></table></figure>

<ul>
<li>添加远程仓库</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add &lt;shortname&gt; &lt;url&gt;			<span class="comment">#添加一个新的远程Git仓库，同时指定一个可以引用的简写</span></span><br></pre></td></tr></table></figure>

<ul>
<li>从远程仓库克隆</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &lt;url&gt;			<span class="comment">#把该Git仓库服务器上的几乎所有数据（包括日志信息、历史记录等）都克隆，而不仅仅是复制工作所需要的文件</span></span><br></pre></td></tr></table></figure>

<ul>
<li>移除无效的远程仓库</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote rm &lt;shortname&gt;			<span class="comment">#此命令只是从本地移除远程仓库的记录，并不会真正影响到远程仓库</span></span><br></pre></td></tr></table></figure>

<ul>
<li>从远程仓库中抓取与拉取</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git fetch [remote-name] [branch-name]		<span class="comment">#从远程仓库获取最新版本到本地仓库，不会自动merge</span></span><br><span class="line">git merge [remote-name] [branch-name]</span><br><span class="line">git pull [remote-name] [branch-name]		<span class="comment">#从远程仓库获取最新版本到本地仓库，会自动merge</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#注意：如果当前本地仓库不是从远程仓库克隆，而是本地创建的仓库，并且仓库中存在文件，此时再从远程仓库拉取文件的时候会报错（fatal：refusing to merge unrelated histories），解决此问题可以在 git pull 命令后加入参数 --allow-unrealted-histories</span></span><br></pre></td></tr></table></figure>

<ul>
<li>推送到远程仓库</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push [remote-name] [branch-name]</span><br></pre></td></tr></table></figure>



<h3 id="五-分支"><a href="#五-分支" class="headerlink" title="五.分支"></a>五.分支</h3><ul>
<li>查看分支</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch				<span class="comment">#列出所有本地分支</span></span><br><span class="line">git branch -r			<span class="comment">#列出所有远程分支</span></span><br><span class="line">git brach -a			<span class="comment">#列出所有本地分支和远程分支</span></span><br></pre></td></tr></table></figure>

<ul>
<li>创建分支</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch (branchname)</span><br><span class="line"><span class="comment">#当你执行 git init 的时候，默认情况下 Git 就会为你创建 master 分支。如果我们要手动创建一个分支。执行 git branch (branchname) 即可</span></span><br></pre></td></tr></table></figure>

<ul>
<li>切换分支</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout (branchname)</span><br><span class="line"><span class="comment">#当你切换分支的时候，Git 会用该分支的最后提交的快照替换你的工作目录的内容， 所以多个分支不需要多个目录。</span></span><br></pre></td></tr></table></figure>

<ul>
<li>推送至远程仓库分支</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push (remote-name) (branch-name)</span><br></pre></td></tr></table></figure>

<ul>
<li>合并分支</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git merge</span><br></pre></td></tr></table></figure>

<ul>
<li>删除分支</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -d (branchname)</span><br></pre></td></tr></table></figure>



<p><img data-src="C:\Users\W-Y-P\AppData\Roaming\Typora\typora-user-images\image-20210505215937507.png" alt="image-20210505215937507"></p>
<h3 id="六-标签"><a href="#六-标签" class="headerlink" title="六.标签"></a>六.标签</h3><ul>
<li>列出已有的标签</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git tag			<span class="comment">#列出已有标签</span></span><br><span class="line">git show (tagname)			<span class="comment">#查看tag信息</span></span><br></pre></td></tr></table></figure>

<ul>
<li>创建新标签</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git tag -a (tagname)			<span class="comment">#-a 选项意为&quot;创建一个带注解的标签&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>将标签推送至远程仓库</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push (remote-name) (tag-name)</span><br></pre></td></tr></table></figure>

<ul>
<li>检出标签</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -b (branch-name) (tag-name)		<span class="comment">#新建一个分支，指向指定标签</span></span><br></pre></td></tr></table></figure>

<ul>
<li>删除标签</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git tag -d (tagname)</span><br><span class="line">git push (remote-name) :refs/tags/(tag-name)</span><br></pre></td></tr></table></figure>









]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>命令</tag>
      </tags>
  </entry>
  <entry>
    <title>nosql认识</title>
    <url>/post/d1b72ac1/</url>
    <content><![CDATA[<span id="more"></span>



<h3 id="一-NoSQL的介绍"><a href="#一-NoSQL的介绍" class="headerlink" title="一.NoSQL的介绍"></a>一.NoSQL的介绍</h3><ul>
<li><strong>NoSQL</strong>（<strong>N</strong>ot <strong>o</strong>nly <strong>SQL</strong>），是对不同于传统的<a href="https://zh.wikipedia.org/wiki/%E9%97%9C%E8%81%AF%E5%BC%8F%E8%B3%87%E6%96%99%E5%BA%AB">关系数据库</a>的<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F">数据库管理系统</a>的统称。</li>
<li>NoSQL用于超大规模数据的存储。这些类型的数据存储不需要固定的模式，无需多余操作就可以横向扩展。</li>
</ul>
<h3 id="二"><a href="#二" class="headerlink" title="二."></a>二.</h3>]]></content>
      <categories>
        <category>nosql</category>
      </categories>
      <tags>
        <tag>nosql</tag>
        <tag>了解</tag>
        <tag>CAP</tag>
      </tags>
  </entry>
  <entry>
    <title>linux命令总结</title>
    <url>/post/7f49275c/</url>
    <content><![CDATA[<span id="more"></span>



<h4 id="一-帮助和开机等"><a href="#一-帮助和开机等" class="headerlink" title="一.帮助和开机等"></a>一.帮助和开机等</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#帮助命令</span></span><br><span class="line">man 命令或配置文件		<span class="comment">#获取帮助信息</span></span><br><span class="line"><span class="built_in">help</span> 命令			<span class="comment">#获得shell内置命令的帮助信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#开机&amp;重启命令</span></span><br><span class="line">shutdown -h now			<span class="comment">#立刻进行关机</span></span><br><span class="line">halt				<span class="comment">#立刻进行关机</span></span><br><span class="line">shutdown -h 1			<span class="comment">#1分钟后关机</span></span><br><span class="line">shutdown -r now			<span class="comment">#现在重启计算机</span></span><br><span class="line">reboot				<span class="comment">#现在重启计算机</span></span><br><span class="line">sync				<span class="comment">#把内存的数据同步到磁盘</span></span><br></pre></td></tr></table></figure>



<h4 id="二-vim"><a href="#二-vim" class="headerlink" title="二.vim"></a>二.vim</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#vim命令(三种模式:一般模式/正常，编辑模式，命令模式)</span></span><br><span class="line">vi				<span class="comment">#文本编辑器</span></span><br><span class="line">vim				<span class="comment">#具有程序编辑的能力，可以看做是vi的增强版本，且在命令行下， :wq(保存退出)  :q(退出)  :q!(强制退出，不保存)</span></span><br><span class="line">yy				<span class="comment">#拷贝当前行	</span></span><br><span class="line">5yy				<span class="comment">#拷贝当前行向下的5行</span></span><br><span class="line">dd				<span class="comment">#删除当前行</span></span><br><span class="line">5dd				<span class="comment">#删除当前行向下的5行</span></span><br><span class="line"><span class="built_in">set</span> nu				<span class="comment">#设置文件的行号</span></span><br><span class="line">/关键字				<span class="comment">#命令行模式下，回车查找，输入n就是查找下一个</span></span><br><span class="line">G/gg				<span class="comment">#在一般模式下，使用快捷键到该文档的最末行/最首行</span></span><br><span class="line">u				<span class="comment">#在一般模式下，撤销这个动作</span></span><br><span class="line">30				<span class="comment">#在一般模式下，输入30，再输入shift+g是移动到30行</span></span><br></pre></td></tr></table></figure>



<h4 id="三-用户-amp-组"><a href="#三-用户-amp-组" class="headerlink" title="三.用户&amp;组"></a>三.用户&amp;组</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#用户&amp;组命令(/etc/passwd:用户的配置文件，/etc/shadow:口令的配置文件，/etc/group:组的配置文件，记录Linux包含的组的信息)</span></span><br><span class="line">groupadd 组名			<span class="comment">#新增组</span></span><br><span class="line">groupdel 组名			<span class="comment">#删除组</span></span><br><span class="line">useradd 用户名			<span class="comment">#添加一个用户(当用户创建成功后，会自动创建和用户同名的家目录)</span></span><br><span class="line">useradd -d 指定目录 用户名	<span class="comment">#给创建的用户指定家目录</span></span><br><span class="line">useradd -g 组名 用户名		<span class="comment">#创建用户时指定组</span></span><br><span class="line">usermod -g 组名 用户名		<span class="comment">#修改用户的组</span></span><br><span class="line">passwd 用户名			<span class="comment">#给用户指定密码</span></span><br><span class="line">userdel 用户名			<span class="comment">#删除用户，但保留家目录</span></span><br><span class="line">userdel -r 用户名		<span class="comment">#删除用户以及家目录</span></span><br><span class="line">chown 用户名 文件名		<span class="comment">#修改文件所有者</span></span><br><span class="line">chgrp 组名 文件名			<span class="comment">#修改文件所在组</span></span><br><span class="line">chmod u=rwx,g=rx,o=x 文件或目录	<span class="comment">#将文件或目录的权限修改成rwx-xr-x</span></span><br><span class="line">chmod 751 文件或目录		<span class="comment">#将文件或目录的权限修改成rwx-xr-x</span></span><br><span class="line">su 用户名			<span class="comment">#切换用户</span></span><br><span class="line">whoami				<span class="comment">#查看当前用户</span></span><br></pre></td></tr></table></figure>



<h4 id="四-文件目录"><a href="#四-文件目录" class="headerlink" title="四.文件目录"></a>四.文件目录</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#文件目录类命令</span></span><br><span class="line"><span class="built_in">pwd</span>				<span class="comment">#显示当前工作目录的绝对路径</span></span><br><span class="line">ls -la 				<span class="comment">#-a显示当前目录所有的文件和目录，包括隐藏的；-l以列表的方式显示信息</span></span><br><span class="line"><span class="built_in">cd</span> ~/..				<span class="comment">#~回到自己的家目录；回到当前目录的上一级目录</span></span><br><span class="line">mkdir [-p] 目录	   		<span class="comment">#创建目录；-p创建多级目录</span></span><br><span class="line">rmdir [-p] 空目录		<span class="comment">#删除空目录；-p顺序删除多级目录</span></span><br><span class="line">touch 文件名称			<span class="comment">#创建一个文件</span></span><br><span class="line">cp [-r] s1 s2			<span class="comment">#将s1拷贝到s2目录下,-r递归复制整个文件夹</span></span><br><span class="line">rm [-rf] 要删除的文件或目录	<span class="comment">#删除的文件或目录，-r递归删除整个文件夹，-f强制删除不提示</span></span><br><span class="line">mv oldName newName		<span class="comment">#重命名</span></span><br><span class="line">mv s1 s2			<span class="comment">#将s1文件或目录移动到s2目录下</span></span><br><span class="line">cat [-n] 文件			<span class="comment">#查看文件内容，-n显示行号，一般会带上管道命令|</span></span><br><span class="line">more 文件			<span class="comment">#ctrl+F：向下滚一屏；ctrl+B：返回上一屏；回车键：向下一行；q：离开more；=：输出当前行号</span></span><br><span class="line">less 文件			<span class="comment">#pagedown：向下翻一页；pageup：向上翻一页；/字串：向下搜索字串功能，n向下查找，N向上查找；q：离开</span></span><br><span class="line"><span class="built_in">echo</span> 输出内容			<span class="comment">#输出内容到控制台，也可以输出环静变量</span></span><br><span class="line">head -n 5 文件			<span class="comment">#查看文件开头的5行，不使用-n就是默认查找文件开头10行</span></span><br><span class="line">tail -n 5 文件			<span class="comment">#查看文件结尾的5行，不使用-n就是默认查找文件结尾10行</span></span><br><span class="line">tail -f 文件			<span class="comment">#实时追踪该文档的所有更新</span></span><br><span class="line">ls -l &gt; 文件			<span class="comment">#列表的内容覆盖写入文件中</span></span><br><span class="line">ls -l &gt;&gt; 文件			<span class="comment">#列表的内容追加写入文件结尾</span></span><br><span class="line"><span class="built_in">history</span> 10			<span class="comment">#显示最近使用过得10个历史命令</span></span><br></pre></td></tr></table></figure>



<h4 id="五-时间日期"><a href="#五-时间日期" class="headerlink" title="五.时间日期"></a>五.时间日期</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#时间日期类命令</span></span><br><span class="line">date <span class="string">&quot;+%Y-%m-%d %H:%M:%S&quot;</span>	<span class="comment">#显示年月日时分秒</span></span><br><span class="line">date -s <span class="string">&quot;2021-04-09 22:00:00&quot;</span>	<span class="comment">#设置系统当前时间</span></span><br><span class="line">cal				<span class="comment">#显示本月日历</span></span><br><span class="line">cal 2021			<span class="comment">#显示2021年日历</span></span><br></pre></td></tr></table></figure>



<h4 id="六-搜索查找"><a href="#六-搜索查找" class="headerlink" title="六.搜索查找"></a>六.搜索查找</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#搜索查找类命令</span></span><br><span class="line">find /home -name s1		<span class="comment">#根据名称递归查找/home目录下的s1文件</span></span><br><span class="line">find /opt -user root		<span class="comment">#查找/opt目录下，用户名为root的文件</span></span><br><span class="line">find / -size +100M		<span class="comment">#查找根目录下大与100M的文件</span></span><br><span class="line">s1 | s2				<span class="comment">#管道符，表示将s1命令处理的结果输出传递给后面的s2命令处理</span></span><br><span class="line">grep -ni <span class="string">&quot;hello&quot;</span> s1		<span class="comment">#在s1文件中查找hello，-n显示匹配行及行号，-i忽略字母大小写</span></span><br><span class="line">cat s1 | grep <span class="string">&quot;hello&quot;</span>		<span class="comment">#在s1文件中查找hello</span></span><br></pre></td></tr></table></figure>



<h4 id="七-压缩-amp-解压"><a href="#七-压缩-amp-解压" class="headerlink" title="七.压缩&amp;解压"></a>七.压缩&amp;解压</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#压缩&amp;解压命令</span></span><br><span class="line">gzip 文件			<span class="comment">#压缩文件</span></span><br><span class="line">gunzip 文件.gz			<span class="comment">#解压.gz文件</span></span><br><span class="line">zip -r 文件或目录			<span class="comment">#-r递归压缩目录及其子文件	</span></span><br><span class="line">unzip -d s1 文件.zip		<span class="comment">#将.zip解压到s1目录下，-d指定解压后文件的目录</span></span><br><span class="line">tar -zcvf s1.tar.gz 文件目录	<span class="comment">#将单个文件或多个文件或目录压缩为s1.tar.gz(-z：打包同时压缩；-c：产生.tar打包文件) </span></span><br><span class="line">tar -zxvf s1.tar.gz		<span class="comment">#将s1.tar.gz解压到当前目录(-x：解包.tar文件；-v：显示详细信息；-f：指定压缩后的文件名) </span></span><br></pre></td></tr></table></figure>



<h4 id="八-任务调度-amp-磁盘"><a href="#八-任务调度-amp-磁盘" class="headerlink" title="八.任务调度&amp;磁盘"></a>八.任务调度&amp;磁盘</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#任务调度</span></span><br><span class="line">crontab -elr			<span class="comment">#-e编辑crontab定时任务；-l查询crontab任务；-r删除当前用户所有的crontab任务，终止任务调度</span></span><br><span class="line">service crond restart		<span class="comment">#重启任务调度</span></span><br><span class="line">at [选项] [时间]			<span class="comment">#一次性定时计划任务</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#磁盘分区&amp;挂载</span></span><br><span class="line">lsblk [-f]			<span class="comment">#查看所有设备挂载情况</span></span><br><span class="line">df -h				<span class="comment">#查询系统整体磁盘使用情况</span></span><br><span class="line">du -hac --max-depth=1 /etc	<span class="comment">#查询/etc目录的磁盘占用情况，深度为1</span></span><br><span class="line">tree 目录			<span class="comment">#以树状显示目录结构</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="九-进程-amp-管理"><a href="#九-进程-amp-管理" class="headerlink" title="九.进程&amp;管理"></a>九.进程&amp;管理</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#进程&amp;管理命令</span></span><br><span class="line">ps -aux			<span class="comment">#查询所有进程</span></span><br><span class="line">ps -aux | grep X	<span class="comment">#查询有没有x进程</span></span><br><span class="line">ps -ef			<span class="comment">#查询所有进程</span></span><br><span class="line">ps -ef | grep X		<span class="comment">#查询有没有x进程</span></span><br><span class="line"><span class="built_in">kill</span> -9 x		<span class="comment">#强制终止x进程号的进程</span></span><br><span class="line">killall x		<span class="comment">#强制终止x进程名称的进程</span></span><br><span class="line">pstree -pu			<span class="comment">#以树状显示所有进程信息</span></span><br><span class="line">pstree -pu x		<span class="comment">#以树状显示x进程信息(-p:显示进程的pid，-u:显示进程的所属用户)</span></span><br><span class="line">setup				<span class="comment">#查看服务</span></span><br><span class="line">systemctl [start|stop|restart|status] 服务名	<span class="comment">#systemctl管理的服务在/usr/lib/systemd/system</span></span><br><span class="line">systemctl list-unit-files [|服务名] 	<span class="comment">#查看服务开机启动状态</span></span><br><span class="line">systemctl <span class="built_in">enable</span> 服务名		<span class="comment">#设置服务开机启动</span></span><br><span class="line">systemctl <span class="built_in">disable</span> 服务名		<span class="comment">#关闭服务开机启动</span></span><br><span class="line">systemctl is-enabled 服务名	<span class="comment">#查询服务是否是自启动的</span></span><br></pre></td></tr></table></figure>





<h4 id="十-firewall-amp-网络"><a href="#十-firewall-amp-网络" class="headerlink" title="十.firewall&amp;网络"></a>十.firewall&amp;网络</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#firewall命令</span></span><br><span class="line">firewall-cmd --permanent --add-port=端口号/协议	<span class="comment">#打开端口</span></span><br><span class="line">firewall-cmd --permanent --remove-port=端口号/协议	<span class="comment">#关闭端口</span></span><br><span class="line">firewall-cmd --reload		<span class="comment">#重新载入</span></span><br><span class="line">firewall-cmd --query-port=端口号/协议	<span class="comment">#查询端口是否开放</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#监控网络命令</span></span><br><span class="line">netstat -anp [|grep ]	<span class="comment">#查看系统网络情况(-an:按一定顺序排列输出，-p:显示哪个进程在调用)</span></span><br></pre></td></tr></table></figure>





<h4 id="十一-rpm-amp-yum"><a href="#十一-rpm-amp-yum" class="headerlink" title="十一.rpm&amp;yum"></a>十一.rpm&amp;yum</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#rpm&amp;yum命令</span></span><br><span class="line">rpm -qa			<span class="comment">#查询所安装的所有rpm软件包</span></span><br><span class="line">rpm -qa | grep 软件包		<span class="comment">#查询指定的rpm软件包</span></span><br><span class="line">rpm -qi 软件包			<span class="comment">#查询软件包信息</span></span><br><span class="line">rpm -ql 软件包			<span class="comment">#查询软件包中的文件</span></span><br><span class="line">rpm -ivh 软件包			<span class="comment">#安装软件包(i:install安装，v:verbose提示，h:hash进度条)</span></span><br><span class="line">rpm -e 软件包			<span class="comment">#卸载软件包</span></span><br><span class="line">yum install 包名		<span class="comment">#安装指定包</span></span><br><span class="line">yum update 包名		<span class="comment">#更新指定包</span></span><br><span class="line">yum remove 包名		<span class="comment">#删除软件包</span></span><br><span class="line">yum search 包名		<span class="comment">#查找软件包</span></span><br><span class="line">yum list			<span class="comment">#列出所有可安装的软件包清单</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>命令</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>redis</title>
    <url>/post/7b25d017/</url>
    <content><![CDATA[<span id="more"></span>

<h3 id="一"><a href="#一" class="headerlink" title="一."></a>一.</h3>]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx</title>
    <url>/post/65b69107/</url>
    <content><![CDATA[<span id="more"></span>



<h3 id="一-Nginx的介绍"><a href="#一-Nginx的介绍" class="headerlink" title="一.Nginx的介绍"></a>一.Nginx的介绍</h3><ul>
<li>Nginx是一个开源的，支持高性能、高并发的 Web 服务和反向代理服务器。</li>
<li>Nginx使用异步事件驱动的方法来处理请求，Nginx的模块化事件驱动架构可以在高负载下提供更可预测的性能。</li>
<li>Nginx是一款面向性能设计的HTTP服务器，相较于Apache、lighttpd具有占有内存少，稳定性高等优势。</li>
<li>可大量并行处理，Nginx在官方测试的结果中，能够支持五万个并行连接，而在实际的运作中，可以支持二万至四万个并行连接等等。</li>
</ul>
<h3 id="二-Nginx的功能"><a href="#二-Nginx的功能" class="headerlink" title="二.Nginx的功能"></a>二.Nginx的功能</h3><ol>
<li><p>反向代理</p>
<ul>
<li><p>反向代理的作用：隐藏服务器信息 -&gt; 保证内网的安全，通常将反向代理作为公网访问地址，web服务器是内网，即通过nginx配置外网访问web服务器内网。</p>
</li>
<li><p>配置反向代理</p>
<ul>
<li><p>找到nginx配置文件nginx.conf</p>
<ul>
<li><p>docker拉取的nginx，默认配置文件是nginx.conf中引入包含的default.conf文件<br>也就是说nginx.conf配置文件中有如下一个配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">include /etc/nginx/conf.d/*.conf;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>修改配置 -&gt; 实现反向代理</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  www.wyp611.com;<span class="comment"># 服务器地址或绑定域名</span></span><br><span class="line"></span><br><span class="line">    location / &#123; <span class="comment"># 访问80端口后的所有路径都转发到 proxy_pass 配置的ip中</span></span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">           proxy_pass http://wyp611.top; <span class="comment"># 配置反向代理的ip地址和端口号 【注：url地址需加上https://】</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>复杂配置 -&gt; 根据不同的后缀名访问不同的服务器地址</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>负载均衡</p>
<ul>
<li><p>负载均衡介绍</p>
<ul>
<li>Nginx提供的负载均衡策略有2种：内置策略和扩展策略。</li>
<li>内置策略为轮询，加权轮询，Ip hash。扩展策略，就非常多。</li>
</ul>
</li>
<li><p>负载均衡的几种常用方式</p>
<ul>
<li><p>轮询（默认）：每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">upstream backserver &#123;</span><br><span class="line">    server 192.168.0.14;</span><br><span class="line">    server 192.168.0.15;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>weight：指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">upstream backserver &#123;</span><br><span class="line">    server 192.168.0.14 weight=3;</span><br><span class="line">    server 192.168.0.15 weight=7;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>ip_hash：上述方式存在一个问题就是说，在负载均衡系统中，假如用户在某台服务器上登录了，那么该用户第二次请求的时候，因为我们是负载均衡系统，每次请求都会重新定位到服务器集群中的某一个，那么<strong>已经登录某一个服务器的用户再重新定位到另一个服务器，其登录信息将会丢失，这样显然是不妥的</strong>。我们可以采用<strong>ip_hash</strong>指令解决这个问题，如果客户已经访问了某个服务器，当用户再次访问时，会将该请求通过<strong>哈希算法，自动定位到该服务器，每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题</strong>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">upstream backserver &#123;</span><br><span class="line">    ip_hash;</span><br><span class="line">    server 192.168.0.14:88;</span><br><span class="line">    server 192.168.0.15:80;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>fair：按后端服务器的响应时间来分配请求，响应时间短的优先分配。</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">upstream backserver &#123;</span><br><span class="line">    server server1<span class="comment">;</span></span><br><span class="line">    server server2<span class="comment">;</span></span><br><span class="line">    fair<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p>动静分离</p>
<ul>
<li>动静分离是将网站静态资源（HTML，JavaScript，CSS，img等文件）与后台应用分开部署，提高用户访问静态代码的速度，降低对后台应用访问。</li>
<li><strong>动静分离的一种常用做法：</strong>将静态资源部署在nginx上，后台项目部署到应用服务器上，根据一定规则静态资源的请求调度到nginx服务器，达到动静分离的目标。</li>
<li><a href="https://www.cnblogs.com/itzgr/p/13335271.html">Nginx动静分离 </a></li>
</ul>
</li>
</ol>
<h3 id="三-Nginx配置文件结构"><a href="#三-Nginx配置文件结构" class="headerlink" title="三.Nginx配置文件结构"></a>三.Nginx配置文件结构</h3><ol>
<li><p>nginx文件结构</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">...              <span class="comment">#全局块</span></span><br><span class="line"></span><br><span class="line">events &#123;         <span class="comment">#events块</span></span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http      <span class="comment">#http块</span></span><br><span class="line">&#123;</span><br><span class="line">    ...   <span class="comment">#http全局块</span></span><br><span class="line">    server        <span class="comment">#server块</span></span><br><span class="line">    &#123; </span><br><span class="line">        ...       <span class="comment">#server全局块</span></span><br><span class="line">        location [PATTERN]   <span class="comment">#location块</span></span><br><span class="line">        &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">        location [PATTERN] </span><br><span class="line">        &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    server</span><br><span class="line">    &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...     <span class="comment">#http全局块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>全局块</strong>：配置影响nginx全局的指令。一般有运行nginx服务器的用户组，nginx进程pid存放路径，日志存放路径，配置文件引入，允许生成worker process数等。</li>
<li><strong>events块</strong>：配置影响nginx服务器或与用户的网络连接。有每个进程的最大连接数，选取哪种事件驱动模型处理连接请求，是否允许同时接受多个网路连接，开启多个网络连接序列化等。</li>
<li><strong>http块</strong>：可以嵌套多个server，配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置。如文件引入，mime-type定义，日志自定义，是否使用sendfile传输文件，连接超时时间，单连接请求数等。</li>
<li><strong>server块</strong>：配置虚拟主机的相关参数，一个http中可以有多个server。</li>
<li><strong>location块</strong>：配置请求的路由，以及各种页面的处理情况。</li>
</ul>
</li>
<li><p>nginx的基本配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">########### 每个指令必须有分号结束。#################</span></span><br><span class="line"><span class="comment">#user administrator administrators;  #配置用户或者组，默认为nobody nobody。</span></span><br><span class="line"><span class="comment">#worker_processes 2;  #允许生成的进程数，默认为1</span></span><br><span class="line"><span class="comment">#pid /nginx/pid/nginx.pid;   #指定nginx进程运行文件存放地址</span></span><br><span class="line">error_log <span class="built_in">log</span>/error.log debug;  <span class="comment">#制定日志路径，级别。这个设置可以放入全局块，http块，server块，级别以此为：debug|info|notice|warn|error|crit|alert|emerg</span></span><br><span class="line">events &#123;</span><br><span class="line">    accept_mutex on;   <span class="comment">#设置网路连接序列化，防止惊群现象发生，默认为on</span></span><br><span class="line">    multi_accept on;  <span class="comment">#设置一个进程是否同时接受多个网络连接，默认为off</span></span><br><span class="line">    <span class="comment">#use epoll;      #事件驱动模型，select|poll|kqueue|epoll|resig|/dev/poll|eventport</span></span><br><span class="line">    worker_connections  1024;    <span class="comment">#最大连接数，默认为512</span></span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;   <span class="comment">#文件扩展名与文件类型映射表</span></span><br><span class="line">    default_type  application/octet-stream; <span class="comment">#默认文件类型，默认为text/plain</span></span><br><span class="line">    <span class="comment">#access_log off; #取消服务日志    </span></span><br><span class="line">    log_format myFormat <span class="string">&#x27;$remote_addr–$remote_user [$time_local] $request $status $body_bytes_sent $http_referer $http_user_agent $http_x_forwarded_for&#x27;</span>; <span class="comment">#自定义格式</span></span><br><span class="line">    access_log <span class="built_in">log</span>/access.log myFormat;  <span class="comment">#combined为日志格式的默认值</span></span><br><span class="line">    sendfile on;   <span class="comment">#允许sendfile方式传输文件，默认为off，可以在http块，server块，location块。</span></span><br><span class="line">    sendfile_max_chunk 100k;  <span class="comment">#每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。</span></span><br><span class="line">    keepalive_timeout 65;  <span class="comment">#连接超时时间，默认为75s，可以在http，server，location块。</span></span><br><span class="line"></span><br><span class="line">    upstream mysvr &#123;   </span><br><span class="line">      server 127.0.0.1:7878;</span><br><span class="line">      server 192.168.10.121:3333 backup;  <span class="comment">#热备</span></span><br><span class="line">    &#125;</span><br><span class="line">    error_page 404 https://www.baidu.com; <span class="comment">#错误页</span></span><br><span class="line">    server &#123;</span><br><span class="line">        keepalive_requests 120; <span class="comment">#单连接请求上限次数。</span></span><br><span class="line">        listen       4545;   <span class="comment">#监听端口</span></span><br><span class="line">        server_name  127.0.0.1;   <span class="comment">#监听地址       </span></span><br><span class="line">        location  ~*^.+$ &#123;       <span class="comment">#请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写。</span></span><br><span class="line">           <span class="comment">#root path;  #根目录</span></span><br><span class="line">           <span class="comment">#index vv.txt;  #设置默认页</span></span><br><span class="line">           proxy_pass  http://mysvr;  <span class="comment">#请求转向mysvr 定义的服务器列表</span></span><br><span class="line">           deny 127.0.0.1;  <span class="comment">#拒绝的ip</span></span><br><span class="line">           allow 172.18.5.54; <span class="comment">#允许的ip           </span></span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
</search>
